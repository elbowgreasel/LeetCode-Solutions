// Problem: Add Two Numbers 
// used basic functionality

class Node {
    constructor(val, next) {
        this.val = val;
        this.next = next ? next : null;
    }
}

var initializeLinkedListFromArray = (arr) => {
    if(arr.length === 0){
        return [];
    }
    let head = new Node(arr[0]);
    let current = head;
    for(let i = 1; i < arr.length; i++){
        let newNode = new Node(arr[i]);
        current.next = newNode;
        current = current.next;
    }
    return head;
}

var addTwoNumbers = function(l1, l2) {
    let valOne = []
    let valTwo = []
    let valTotal = []
    while(l1.next){
        valOne.push(l1.val)
        l1 = l1.next;
    }
    while(l2.next){
        valTwo.push(l2.val)
        l2 = l2.next;
    }
    valOne.push(l1.val)
    valTwo.push(l2.val)
    console.log(`ValOne: ${valOne} ValTwo: ${valTwo}`)
    if(valOne.length === valTwo.length){
        for(let i = 0; i < valOne.length - 1; i++){
            let total = valOne[i] + valTwo[i]
            while(total >= 10){
                total -= 10;
                valOne[i + 1] += 1;
            }
            valTotal.push(total)
        }
        let total = valOne[valOne.length - 1] + valTwo[valTwo.length - 1]
        while(total >= 10){
            if(!valTotal[valOne.length]){
                valTotal[valOne.length] = 1;
            }
            else{
                valTotal[valOne.length] += 1;
            }
            total -= 10
        }
        valTotal[valOne.length - 1] = total
        return initializeLinkedListFromArray(valTotal)
    }
    else if(valOne.length > valTwo.length){
        for(let i = 0; i < valOne.length - 1; i++){
            let total;
            if(valTwo[i]){
                total = valOne[i] + valTwo[i]
            }
            else{
                total = valOne[i]
            }
            while(total >= 10){
                total -= 10;
                valOne[i + 1] += 1;
            }
            valTotal.push(total)
        }
        let total = valOne[valOne.length - 1]
        if(total >= 10){
            valTotal[valOne.length - 1] = total - 10
            valTotal[valOne.length] = 1
        }
        else{
            valTotal[valOne.length - 1] = total
        }
        return initializeLinkedListFromArray(valTotal)
    }
    else{
        for(let i = 0; i < valTwo.length - 1; i++){
            let total;
            if(valOne[i]){
                total = valOne[i] + valTwo[i]
            }
            else{
                total = valTwo[i]
            }
            while(total >= 10){
                total -= 10;
                valTwo[i + 1] += 1;
            }
            valTotal.push(total)
        }
        let total = valTwo[valTwo.length - 1]
        if(total >= 10){
            valTotal[valTwo.length - 1] = total - 10
            valTotal[valTwo.length] = 1
        }
        else{
            valTotal[valTwo.length - 1] = total
        }
        return initializeLinkedListFromArray(valTotal)
    }
};

// search-a-2d-matrix
// Unfinished for time exceeding limit, needs to be optimized/refactored.

/**
 * @param {number[][]} matrix
 * @param {number} target
 * @return {boolean}
 */
 
var searchMatrix = function(matrix, target) {
    if(matrix[0].length === 1 && matrix.length <= 1){
        if(matrix[0][0] === target){
            return true;
        }
        return false;
    }
    let state = false;
    let quitEarly = false;
    while(quitEarly === false){
        matrix.forEach(arr => {
            while(arr.length >= 1 && state == false){
                if(arr.length === 1){
                    if(arr[0] === target){
                        state = true;
                        quitEarly = true;
                    }
                    arr.pop()
                    return
                }
                let current = arr[Math.floor(arr.length / 2)]
                if(current > target){
                    arr = arr.slice(0, Math.floor(arr.length / 2))
                }
                else if(current < target){
                    arr = arr.slice(Math.floor(arr.length / 2 + 1), arr.length)
                }
                else{
                    state = true
                    quitEarly = true;
                }
            }
        })
        quitEarly = true;
    }
    return state
};

// Longest Substring Without Repeating Characters

/**
 * @param {string} s
 * @return {number}
 */
var lengthOfLongestSubstring = function(s) {
    if (s.length < 1){
        return 0
    }
    let longest = 1
    let used = []
    let counter = 0
    let index = 0;
    while(index <= s.length-1){
        if(used[s[index]]){
            if(longest < counter){
                longest = counter;
            }
            index -= (counter - 1);
            counter = 1;
            used = []
        }
        else{
            counter++
        }
        used[s[index]] = 1;
        index++
    }
    return longest > counter ? longest : counter;
};

// Longest Palindromic Substring

/**
 * @param {string} s
 * @return {string}
 */
var longestPalindrome = function(s) {
    if(s.length <= 1){
        return s.length < 1 ? s : s[0]
    }
    let longest = 1
    let word = s[0]
    for(let i = 0; (i - 1 + longest) < s.length-1 ; i++){
        for(let j = s.length-1; j > (longest + i - 1); j--){
            if(s[i] == s[j]){
                let possibleWord = s.slice(i, j+1)
                let left = ""
                let right = ""
                if(possibleWord.length % 2 == 0){
                    left = possibleWord.slice(0, possibleWord.length/2)
                    right = possibleWord.slice(possibleWord.length/2, possibleWord.length)
                }
                else{
                    left = possibleWord.slice(0, Math.floor(possibleWord.length/2))
                    right = possibleWord.slice(Math.ceil(possibleWord.length/2), possibleWord.length)
                }
                right = right.split("").reverse().join("")
                if(left == right){
                    word = possibleWord
                    longest = word.length
                }
            }
        }
    }
    return word
};

# Zigzag Conversion

/**
 * @param {string} s
 * @param {number} numRows
 * @return {string}
 */
var convert = function(s, numRows) {
    if(s.length <= numRows || numRows < 2){
        return s
    }
    let counter = 0
    let loop = 1
    let zzlist = {}
    for(let i = 1; i <= numRows; i++){
        zzlist[i] = []
    }
    while(counter < s.length){
        if(loop == 1 || loop == numRows){
            for(let i = 1; i <= numRows; i++){
                if(counter < s.length){
                    zzlist[i].push(s[counter])
                    counter++
                }
            }
            loop = 2
        }
        else{
            zzlist[(numRows - (loop - 1))].push(s[counter])
            counter++
            loop++
        }
    }
    newList = []
    for(let i = 1; i <= numRows; i++){
        newList = newList.concat(zzlist[i])
    }
    console.log(zzlist)
    return newList.join("")
};

// Reverse Integer

/**
 * @param {number} x
 * @return {number}
 */
var reverse = function(x) {
    x = x < 0 ? (x*-1).toString().split("").reverse().join("")*-1 : x.toString().split("").reverse().join("")
    if(x > 2147483648 || x < -2147483648){
        return 0
    }
    return x
};

// String to Integer (atoi)

/**
 * @param {string} s
 * @return {number}
 */
var myAtoi = function(s) {
    let operator = false
    let nonan = false
    s = s.trim().split("").filter(e => {
        
        if(!isNaN(e) && !nonan){
            operator = true
            return e
        }
        else if((e == "-" || e == "+") && !operator && !nonan){
            operator = e
            return e
        }
        else{
            nonan = true
        }
    }).join("")
    console.log(s)
    s = s.split(" ")[0]
    isNaN(s) ? s = 0 : s = +s
    return (s > 2147483647 || s < -2147483648) ? (s < 0 ? -2147483648 : 2147483647) : s
};


// Remove Nth Node From End of List

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} n
 * @return {ListNode}
 */

var removeNthFromEnd = function(head, n) {
    let list = []
    let temp = head
    while(temp){
        list.push(temp.val)
        temp = temp.next
    }
    let ll = list.length
    list.splice(ll - n, 1)
    ll--
    if(ll == 0){
        return null
    }
    let node = new ListNode(list[0], null)
    list.shift()
    let current = node
    ll--
    while(ll > 0){
        current.next = new ListNode(list[0], null)
        current = current.next
        list.shift()
        ll--
    }
    return node
};
